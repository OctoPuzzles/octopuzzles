// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Label {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  sudokus     Sudoku[]
}

enum UserRole {
  Admin
  User
}

model User {
  id           Int           @id @default(autoincrement())
  username     String        @unique
  email        String        @unique
  password     String
  role         UserRole
  verified     Boolean
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  tokens       Token[]
  votes        Vote[]
  sudokus      Sudoku[]
  walkthroughs Walkthrough[]
  comments     Comment[]
  userSettings UserSettings?
  savedGames   SavedGame[]
  userStats    UserStats[]
}

model UserSettings {
  userId  Int   @unique
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  scanner Json?
}

enum TokenKind {
  VERIFY_EMAIL
}

model Token {
  id     Int       @id @default(autoincrement())
  kind   TokenKind
  token  String    @unique
  userId Int
  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Sudoku {
  id             Int           @id @default(autoincrement())
  userId         Int
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  publicSince    DateTime?
  title          String
  description    String
  views          Int           @default(0)
  solves         Int           @default(0)
  points         Int
  rank           Float
  difficulty     Int?
  userDifficulty Float?
  rows           Int
  columns        Int
  marginTop      Int?
  marginRight    Int?
  marginBottom   Int?
  marginLeft     Int?
  cells          Json?
  givens         Json?
  colors         Json?
  regions        Json?
  extendedcages  Json?
  paths          Json?
  borderclues    Json?
  cellclues      Json?
  logic          Json?
  solution       Json?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  labels         Label[]
  votes          Vote[]
  walkthroughs   Walkthrough[]
  comments       Comment[]
  savedGames     SavedGame[]
  userStats      UserStats[]

  @@unique([userId, title])
}

model Vote {
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  sudokuId Int
  sudoku   Sudoku @relation(fields: [sudokuId], references: [id], onDelete: Cascade)
  value    Int

  @@id([userId, sudokuId])
}

model Walkthrough {
  id       Int    @id @default(autoincrement())
  sudokuId Int
  sudoku   Sudoku @relation(fields: [sudokuId], references: [id], onDelete: Cascade)
  userId   Int
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  steps    Json

  @@unique([userId, sudokuId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  sudokuId  Int
  sudoku    Sudoku   @relation(fields: [sudokuId], references: [id], onDelete: Cascade)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SavedGame {
  sudokuId Int
  sudoku   Sudoku   @relation(fields: [sudokuId], references: [id], onDelete: Cascade)
  userId   Int
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gameData Json
  savedOn  DateTime @default(now())

  @@unique(fields: [sudokuId, userId], name: "uniqueKey")
}

model UserStats {
  sudokuId     Int
  sudoku       Sudoku    @relation(fields: [sudokuId], references: [id], onDelete: Cascade)
  userId       Int
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  lastViewedOn DateTime  @default(now())
  solvedOn     DateTime?
  solveTime    Int?
  difficulty   Int?

  @@unique(fields: [sudokuId, userId], name: "uniqueKey")
}
